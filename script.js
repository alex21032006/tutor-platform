// Telegram Web App
let tg = null;
let currentUser = null;

// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const APP_DATA = {
    homework: [
        {
            id: 1,
            tutor_id: 999,
            student_id: null,
            title: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: –¥—Ä–æ–±–∏",
            description: "–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –¥—Ä–æ–±–µ–π –∏–∑ —É—á–µ–±–Ω–∏–∫–∞ —Å—Ç—Ä. 45-48",
            max_score: 10,
            created_at: new Date().toISOString()
        },
        {
            id: 2,
            tutor_id: 999,
            student_id: 1001
            title: "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            description: "–û—Å–æ–±—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∞–ª–≥–µ–±—Ä–µ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è",
            max_score: 15,
            created_at: new Date().toISOString()
        }
    ],
    ratings: {
        "1001": {
            "1": { score: 8, comment: "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –æ—à–∏–±–∫–∏", graded_at: new Date().toISOString() },
            "2": { score: 12, comment: "–û—Ç–ª–∏—á–Ω–æ!", graded_at: new Date().toISOString() }
        },
        "1002": {
            "1": { score: 9, comment: "–ü–æ—á—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ", graded_at: new Date().toISOString() }
        }
    },
    submissions: {}
};

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const PREDEFINED_USERS = {
    "student_anna": { id: 1001, username: "student_anna", first_name: "–ê–Ω–Ω–∞", role: "student" },
    "student_mikhail": { id: 1002, username: "student_mikhail", first_name: "–ú–∏—Ö–∞–∏–ª", role: "student" },
    "student_ekaterina": { id: 1003, username: "student_ekaterina", first_name: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", role: "student" },
    "tutor_main": { id: 999, username: "tutor_main", first_name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á", role: "tutor" }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeTelegramApp();
});

function initializeTelegramApp() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
    if (window.Telegram && window.Telegram.WebApp) {
        tg = window.Telegram.WebApp;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
        tg.ready();
        tg.expand();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        tg.setHeaderColor('#40a7e3');
        tg.setBackgroundColor('#ffffff');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const tgUser = tg.initDataUnsafe?.user;

        if (tgUser) {
            handleTelegramUser(tgUser);
        } else {
            // –î–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            setupDemoMode();
        }

        console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
        // –ù–µ –≤ Telegram - –¥–µ–º–æ-—Ä–µ–∂–∏–º
        console.log('–ù–µ –≤ Telegram, –¥–µ–º–æ-—Ä–µ–∂–∏–º');
        setupDemoMode();
    }
}

function handleTelegramUser(tgUser) {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    let user = PREDEFINED_USERS[tgUser.username];

    if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Telegram
        user = {
            id: tgUser.id,
            username: tgUser.username,
            first_name: tgUser.first_name,
            role: 'student' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—É–¥–µ–Ω—Ç
        };
    }

    currentUser = user;
    initializeAppInterface();
}

function setupDemoMode() {
    // –î–µ–º–æ-—Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const demoUsers = [
        { id: 1001, username: "student_anna", first_name: "–ê–Ω–Ω–∞", role: "student" },
        { id: 999, username: "tutor_main", first_name: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á", role: "tutor" }
    ];

    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    currentUser = demoUsers[0];
    initializeAppInterface();
}

function initializeAppInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('userName').textContent = currentUser.first_name;
    document.getElementById('welcomeName').textContent = currentUser.first_name;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    setupNavigation();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    setupRoleBasedUI();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    loadMainData();
}

function setupNavigation() {
    const navButtons = document.querySelectorAll('.nav-btn');

    navButtons.forEach(button => {
        button.addEventListener('click', function() {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            navButtons.forEach(btn => btn.classList.remove('active'));

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
            this.classList.add('active');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
            const tabName = this.getAttribute('data-tab');
            showTab(tabName);
        });
    });
}

function setupRoleBasedUI() {
    const addHomeworkBtn = document.getElementById('addHomeworkBtn');
    const actionsGrid = document.getElementById('actionsGrid');

    if (currentUser.role === 'tutor') {
        addHomeworkBtn.style.display = 'block';
        actionsGrid.innerHTML = `
            <button class="action-btn" onclick="showHomeworkModal()">
                <span class="action-icon">‚ûï</span>
                <span>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ</span>
            </button>
            <button class="action-btn" onclick="showTab('rating')">
                <span class="action-icon">‚≠ê</span>
                <span>–†–µ–π—Ç–∏–Ω–≥</span>
            </button>
            <button class="action-btn" onclick="checkHomework()">
                <span class="action-icon">üìù</span>
                <span>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –î–ó</span>
            </button>
            <button class="action-btn" onclick="generateReport()">
                <span class="action-icon">üìä</span>
                <span>–û—Ç—á–µ—Ç</span>
            </button>
        `;
    } else {
        addHomeworkBtn.style.display = 'none';
        actionsGrid.innerHTML = `
            <button class="action-btn" onclick="showTab('homework')">
                <span class="action-icon">üìö</span>
                <span>–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è</span>
            </button>
            <button class="action-btn" onclick="showTab('rating')">
                <span class="action-icon">‚≠ê</span>
                <span>–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥</span>
            </button>
            <button class="action-btn" onclick="submitHomeworkDemo()">
                <span class="action-icon">üì§</span>
                <span>–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É</span>
            </button>
            <button class="action-btn" onclick="showAchievements()">
                <span class="action-icon">üèÜ</span>
                <span>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
            </button>
        `;
    }
}

function showTab(tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    const activeTab = document.getElementById(tabName);
    if (activeTab) {
        activeTab.classList.add('active');
        loadTabData(tabName);
    }
}

function loadTabData(tabName) {
    switch (tabName) {
        case 'main':
            loadMainData();
            break;
        case 'homework':
            loadHomeworkData();
            break;
        case 'rating':
            loadRatingData();
            break;
    }
}

function loadMainData() {
    if (currentUser.role === 'tutor') {
        loadTutorMain();
    } else {
        loadStudentMain();
    }
}

function loadTutorMain() {
    const homework = APP_DATA.homework.filter(hw => hw.tutor_id === currentUser.id);
    const ratings = APP_DATA.ratings;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    let totalScore = 0;
    let ratingCount = 0;

    Object.values(ratings).forEach(studentRatings => {
        Object.values(studentRatings).forEach(rating => {
            totalScore += rating.score;
            ratingCount++;
        });
    });

    const avgScore = ratingCount > 0 ? (totalScore / ratingCount).toFixed(1) : '0';
    const activeHW = homework.length;
    const completedHW = ratingCount;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('avgScore').textContent = avgScore;
    document.getElementById('activeHW').textContent = activeHW;
    document.getElementById('completedHW').textContent = completedHW;
}

function loadStudentMain() {
    const homework = APP_DATA.homework.filter(hw =>
        hw.student_id === currentUser.id || hw.student_id === null
    );
    const ratings = APP_DATA.ratings[currentUser.id] || {};

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const ratedHomework = Object.values(ratings);
    const avgScore = ratedHomework.length > 0
        ? (ratedHomework.reduce((acc, r) => acc + r.score, 0) / ratedHomework.length).toFixed(1)
        : '0';

    const activeHW = homework.length;
    const completedHW = Object.keys(ratings).length;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('avgScore').textContent = avgScore;
    document.getElementById('activeHW').textContent = activeHW;
    document.getElementById('completedHW').textContent = completedHW;
}

function loadHomeworkData() {
    const homeworkList = document.getElementById('homeworkList');

    if (currentUser.role === 'tutor') {
        loadTutorHomework();
    } else {
        loadStudentHomework();
    }
}

function loadTutorHomework() {
    const homeworkList = document.getElementById('homeworkList');
    const homework = APP_DATA.homework.filter(hw => hw.tutor_id === currentUser.id);

    if (homework.length === 0) {
        homeworkList.innerHTML = '<div class="no-data">–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>';
        return;
    }

    homeworkList.innerHTML = homework.map(hw => {
        const studentCount = Object.keys(APP_DATA.ratings).filter(studentId =>
            APP_DATA.ratings[studentId][hw.id]
        ).length;

        return `
            <div class="homework-item">
                <div class="homework-header">
                    <div class="homework-title">${hw.title}</div>
                    <div class="homework-score">${hw.max_score} –±–∞–ª–ª–æ–≤</div>
                </div>
                <div class="homework-meta">
                    <span>üë• ${hw.student_id ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ' : '–î–ª—è –≤—Å–µ—Ö'}</span>
                    <span>üìä ${studentCount} –æ—Ü–µ–Ω–æ–∫</span>
                </div>
                <div class="homework-description">${hw.description}</div>
                <div class="homework-actions">
                    <button class="btn-primary btn-small" onclick="gradeHomework(${hw.id})">
                        üìù –û—Ü–µ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

function loadStudentHomework() {
    const homeworkList = document.getElementById('homeworkList');
    const homework = APP_DATA.homework.filter(hw =>
        hw.student_id === currentUser.id || hw.student_id === null
    );
    const ratings = APP_DATA.ratings[currentUser.id] || {};

    if (homework.length === 0) {
        homeworkList.innerHTML = '<div class="no-data">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</div>';
        return;
    }

    homeworkList.innerHTML = homework.map(hw => {
        const rating = ratings[hw.id];
        const isGraded = !!rating;

        return `
            <div class="homework-item">
                <div class="homework-header">
                    <div class="homework-title">${hw.title}</div>
                    <div class="homework-score">
                        ${isGraded ? `‚úÖ ${rating.score}/${hw.max_score}` : `üìù ${hw.max_score} –±–∞–ª–ª–æ–≤`}
                    </div>
                </div>
                <div class="homework-meta">
                    <span>üìÖ ${new Date(hw.created_at).toLocaleDateString('ru-RU')}</span>
                    <span>${isGraded ? '‚≠ê –û—Ü–µ–Ω–µ–Ω–æ' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏'}</span>
                </div>
                <div class="homework-description">${hw.description}</div>
                ${isGraded && rating.comment ? `
                    <div class="homework-comment">
                        <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${rating.comment}
                    </div>
                ` : ''}
            </div>
        `;
    }).join('');
}

function loadRatingData() {
    const ratingContainer = document.getElementById('ratingContainer');

    if (currentUser.role === 'tutor') {
        loadTutorRating();
    } else {
        loadStudentRating();
    }
}

function loadTutorRating() {
    const ratingContainer = document.getElementById('ratingContainer');
    const students = Object.values(PREDEFINED_USERS).filter(u => u.role === 'student');

    const studentStats = students.map(student => {
        const ratings = APP_DATA.ratings[student.id] || {};
        const ratedHomework = Object.values(ratings);
        const avgScore = ratedHomework.length > 0
            ? (ratedHomework.reduce((acc, r) => acc + r.score, 0) / ratedHomework.length).toFixed(1)
            : '0';

        return {
            ...student,
            avgScore,
            completedCount: ratedHomework.length
        };
    }).sort((a, b) => b.avgScore - a.avgScore);

    ratingContainer.innerHTML = `
        <div class="rating-table">
            <div class="rating-header">
                <div>#</div>
                <div>–£—á–µ–Ω–∏–∫</div>
                <div>–°—Ä–µ–¥–Ω–∏–π</div>
                <div>–î–ó</div>
            </div>
            ${studentStats.map((student, index) => `
                <div class="rating-row">
                    <div class="rank">${index + 1}</div>
                    <div class="student-name">
                        <div class="student-avatar">${student.first_name[0]}</div>
                        ${student.first_name}
                    </div>
                    <div class="avg-score">${student.avgScore}</div>
                    <div class="completed-count">${student.completedCount}</div>
                </div>
            `).join('')}
        </div>
    `;
}

function loadStudentRating() {
    const ratingContainer = document.getElementById('ratingContainer');
    const ratings = APP_DATA.ratings[currentUser.id] || {};
    const homework = APP_DATA.homework;

    const ratedHomework = Object.entries(ratings).map(([hwId, rating]) => {
        const hw = homework.find(h => h.id == hwId);
        return {
            homework: hw,
            rating: rating
        };
    }).sort((a, b) => b.rating.score - a.rating.score);

    if (ratedHomework.length === 0) {
        ratingContainer.innerHTML = '<div class="no-data">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫</div>';
        return;
    }

    ratingContainer.innerHTML = `
        <div class="rating-table">
            <div class="rating-header">
                <div>#</div>
                <div>–ó–∞–¥–∞–Ω–∏–µ</div>
                <div>–û—Ü–µ–Ω–∫–∞</div>
                <div>–ú–∞–∫—Å.</div>
            </div>
            ${ratedHomework.map((item, index) => `
                <div class="rating-row">
                    <div class="rank">${index + 1}</div>
                    <div>${item.homework.title}</div>
                    <div class="avg-score">${item.rating.score}</div>
                    <div class="completed-count">${item.homework.max_score}</div>
                </div>
            `).join('')}
        </div>
    `;
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showHomeworkModal() {
    document.getElementById('homeworkModal').style.display = 'flex';
}

function showGradeModal(studentId, homeworkId) {
    const student = PREDEFINED_USERS[Object.keys(PREDEFINED_USERS).find(name =>
        PREDEFINED_USERS[name].id == studentId
    )];
    const homework = APP_DATA.homework.find(h => h.id == homeworkId);

    document.getElementById('studentName').textContent = student.first_name;
    document.getElementById('hwName').textContent = homework.title;

    document.getElementById('gradeModal').style.display = 'flex';
}

function closeModal() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function addHomework() {
    const title = document.getElementById('hwTitle').value;
    const description = document.getElementById('hwDesc').value;
    const maxScore = document.getElementById('hwMaxScore').value;

    if (!title) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }

    const newHomework = {
        id: Date.now(),
        tutor_id: currentUser.id,
        student_id: null,
        title: title,
        description: description,
        max_score: parseInt(maxScore),
        created_at: new Date().toISOString()
    };

    APP_DATA.homework.push(newHomework);
    closeModal();
    loadHomeworkData();
    showAlert('–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
}

function gradeHomework(homeworkId) {
    // –î–ª—è –¥–µ–º–æ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    const students = Object.values(PREDEFINED_USERS).filter(u => u.role === 'student');
    if (students.length > 0) {
        showGradeModal(students[0].id, homeworkId);
    }
}

function submitGrade() {
    const score = document.getElementById('hwScore').value;
    const comment = document.getElementById('hwComment').value;

    if (!score) {
        showAlert('–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É');
        return;
    }

    // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    const students = Object.values(PREDEFINED_USERS).filter(u => u.role === 'student');
    if (students.length > 0) {
        const studentId = students[0].id;

        if (!APP_DATA.ratings[studentId]) {
            APP_DATA.ratings[studentId] = {};
        }

        APP_DATA.ratings[studentId][selectedHomeworkId] = {
            score: parseInt(score),
            comment: comment,
            graded_at: new Date().toISOString()
        };
    }

    closeModal();
    loadHomeworkData();
    showAlert('–û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞!');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showAlert(message) {
    if (tg && tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

function checkHomework() {
    showAlert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π');
}

function generateReport() {
    showAlert('–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

function submitHomeworkDemo() {
    showAlert('–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!');
}

function showAchievements() {
    const ratings = APP_DATA.ratings[currentUser.id] || {};
    const completed = Object.keys(ratings).length;

    let achievements = "–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n";

    if (completed >= 1) achievements += "üèÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n";
    if (completed >= 3) achievements += "üèÖ –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–µ–Ω–∏–∫!\n";
    if (Object.values(ratings).some(r => r.score >= 9)) achievements += "üèÖ –û—Ç–ª–∏—á–Ω–∏–∫!\n";

    showAlert(achievements || "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!");
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        closeModal();
    }
});

let selectedHomeworkId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function loadMainData() {
    if (currentUser.role === 'tutor') {
        loadTutorMain();
    } else {
        loadStudentMain();
    }
}